//go:build unit
// +build unit

package handler

import (
	"errors"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"reflect"
	"fmt"
	


	"github.com/DATA-DOG/go-sqlmock"
	"github.com/stretchr/testify/assert"	
)

// func handler(w http.ResponseWriter, r *http.Request) {
// 	w.WriteHeader(http.StatusOK)
// 	w.Write([]byte(`{"id": 1, "name": "AnuchitO", "info": "gopher"}`))
// }


func TestListExpenses(t *testing.T) {

	// server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
	// 	if r.Method == http.MethodGet {
	// 		w.WriteHeader(http.StatusOK)
	// 		w.Write([]byte(`{"id": 1, "title": "apple smoothie", "amount": 89, "note":"no discount", "tags": ["beverage"]}`))
	// 	}else{
	// 		w.WriteHeader(http.StatusMethodNotAllowed)
	// 	}
	// }))



	req := httptest.NewRequest(http.MethodGet, "/expenses", strings.NewReader(""))
	//req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
	rec := httptest.NewRecorder()


	newsMockRows := sqlmock.NewRows([]string{"id", "title", "amount", "note", "tags"}).
		AddRow("1", "apple smoothie", "89", "no discount","test tags")

	db, mock, err := sqlmock.New()
	mock.ExpectQuery("SELECT (.+) FROM expenses").WillReturnRows(newsMockRows)
	if err != nil {
		t.Fatalf("an error '%s' was not expected when opening a stub database connection", err)
	}

	expected := "[{\"id\":1,\"title\":\"apple smoothie\",\"amount\":89,\"note\":\"no discount\",\"tags\":\"test tags\"}]"



	// want := &Expense{
	// 	ID:   1,
	// 	Title: "apple smoothie",
	// 	Amount: 89,
	// 	Note: "no discount",
	// 	Tags: "test tags",
	// 	//Tags: []string{"beverage"},
	// }

	t.Run("List Expenses", func(t *testing.T) {
		//defer server.Close()

		h := handler{db}

		// resp, err := h.ListExpenses(server.URL)

		// if !reflect.DeepEqual(resp, want) {
		// 	t.Errorf("expected (%v), got (%v)", want, resp)
		// }

		// if !errors.Is(err, nil) {
		// 	t.Errorf("expected (%v), got (%v)", nil, err)
		// }
		
		err := h.ListExpenses(req, rec)

		// Assertions
		if assert.NoError(t, err) {
			assert.Equal(t, http.StatusOK, rec.Code)
			assert.Equal(t, expected, strings.TrimSpace(rec.Body.String()))
		}		


	})



}


func TestGetGreeting(t *testing.T) {

	// req := httptest.NewRequest(http.MethodGet, "/", strings.NewReader(""))
	// req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
	// w := httptest.NewRecorder()


	//h := handler{w, req}

	server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if r.Method == http.MethodGet {
			w.WriteHeader(http.StatusOK)
			w.Write([]byte(`{"id": 1, "name": "AnuchitO", "info": "gopher"}`))
		}else{
			w.WriteHeader(http.StatusMethodNotAllowed)
		}
	}))
	want := &Response{
		ID:   1,
		Name: "AnuchitO",
		Info: "gopher",
	}

	t.Run("Happy server response", func(t *testing.T) {
		defer server.Close()

		h := handler{}

		resp, err := h.Greeting(server.URL)

		if !reflect.DeepEqual(resp, want) {
			fmt.Printf("response %v", resp)
			t.Errorf("expected (%v), got (%v)", want, resp)
		}

		if !errors.Is(err, nil) {
			t.Errorf("expected (%v), got (%v)", nil, err)
		}
	})




}
